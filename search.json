[{"path":"https://chemunits.kopflab.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 chemunits authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"what-are-chemunits","dir":"Articles","previous_headings":"","what":"What are chemunits?","title":"Explore","text":"FIXME: point [units::set_units()] documentation [units::valid_udunits()]","code":""},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"conversions","dir":"Articles","previous_headings":"What are chemunits?","what":"Conversions","title":"Explore","text":"","code":"# standard conversions set_cu(1, \"N\") |> set_cu(\"kN\") ## 0.001 [kN] set_cu(1, \"V*A*s\") |> set_cu(\"N*cm\") ## 100 [cm*N] # more complex (and fun but not always useful)  set_cu(1, \"horsepower\") |> set_cu(\"W\") ## 745.6999 [W] set_cu(1, \"dram\") |> set_cu(\"g\") ## 1.771845 [g] set_cu(1, \"firkin\") |> set_cu(\"L\") ## 39.74683 [L] set_cu(1, \"fortnight\") |> set_cu(\"days\") ## 14 [d] set_cu(1, \"fathom\") |> set_cu(\"pica\") ## 433.6209 [pica] # more complex and useful for chemistry set_cu(0, \"degC\") |> set_cu(\"degF\") ## 32 [degF] set_cu(32, \"degF\") |> set_cu(\"K\") ## 273.15 [K] set_cu(1, \"bar\") |> set_cu(\"atm\") ## 0.9869233 [atm] set_cu(1, \"bar\") |> set_cu(\"psi\") ## 14.50377 [psi] set_cu(1, \"mbar\") |> set_cu(\"mTorr\") ## 750.0616 [mTorr]"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"preferred-units","dir":"Articles","previous_headings":"What are chemunits?","what":"Preferred units","title":"Explore","text":"Preferred units particularly convenient converting units multiplication division different units described details Arithmetic section.","code":"chemunits_options(preferred_units = c(\"g\", \"1\")) set_cu(1, \"lb\", convert_to_preferred = TRUE) ## 453.5924 [g] set_units(15, \"psi\", convert_to_preferred = TRUE) # no preferred unit defined for pressure ## 15 [psi] chemunits_options(preferred_units = c(\"g\", \"bar\", \"1\")) set_units(15, \"psi\", convert_to_preferred = TRUE) # FIXME: why does this not work? ## 15 [psi]"},{"path":[]},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"fixme","dir":"Articles","previous_headings":"","what":"FIXME","title":"Explore","text":"chemical quantities package keep track units represent base unit detailed quantities vignette metric prefix. default, metric prefix adjusted automatically keep numeric values range close 1. However, scaling specific prefix easily achieved. point [units::valid_udunits_prefixes()]","code":"# automatic scaling chemunits_options(auto_scale_units = c(\"g\", \"L\", \"M\")) set_cu(5000, \"g\") # automatically scaled to kg ## 5 [kg] set_cu(100, \"nL\") * 1e5 # automatically scaled to mL ## 10 [mL] set_cu(1e-4, \"M\") # automatically scaled to microM ## 100 [µM] # no automatic scaling set_cu(0.5, \"g\", auto_scale = FALSE) # explicly stays g ## 500 [mg] set_cu(5000, \"J\") # stays J because it wasn't defined to be included ## 5000 [J] # enable it for J too chemunits_options(auto_scale_units = c(\"g\", \"L\", \"M\", \"J\")) set_cu(5000, \"J\") # now it becomes kJ ## 5 [kJ]"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"formatting","dir":"Articles","previous_headings":"FIXME","what":"Formatting","title":"Explore","text":"retrieve numeric values text includes units, simply use [base::format()]. numeric value quantity can retrieved via get_chemvalue()/get_cv() function converts requested units (possible) returns numeric value units. units number can also retrieved directly get_units() function vectors, lists, well entire data frames (see details latter data frames section).","code":"# get quantity with unit set_cu(100, \"mg\") |> format() ## [1] \"100 [mg]\" set_cu(0:10, \"C\") |> format() ##  [1] \" 0 [C]\" \" 1 [C]\" \" 2 [C]\" \" 3 [C]\" \" 4 [C]\" \" 5 [C]\" \" 6 [C]\" \" 7 [C]\" ##  [9] \" 8 [C]\" \" 9 [C]\" \"10 [C]\" set_cu(760, \"Torr\") |> format() ## [1] \"760 [Torr]\" # by default autosales each value individually if the unit is scalalbe set_cu(c(0.1, 1, 1000), \"g\") |> format() # auto-scalable unit ## [1] \"100 [mg]\" \"1 [g]\"    \"1 [kg]\" set_cu(c(0.1, 1, 1000), \"N\") |> format() ## [1] \"1e-01 [N]\" \"1e+00 [N]\" \"1e+03 [N]\" # but the autoscaling can be turned off too set_cu(c(0.1, 1, 1000), \"g\") |> format(auto_scale = FALSE, scientific = FALSE) ## [1] \"   0.1 [g]\" \"   1.0 [g]\" \"1000.0 [g]\" # or you can specify the desired unit set_cu(c(0.1, 1, 1000), \"g\") |> format(units = \"kg\", scientific = FALSE) ## [1] \"0.0001 [kg]\" \"0.0010 [kg]\" \"1.0000 [kg]\" # of course impossible conversion don't work try(set_cu(1, \"kg\") |> format(units = \"J\")) ## Error in `units<-`(`*tmp*`, value = units) :  ##   cannot convert kg into J # FIXME: move this to the end set_cu(100, \"mg\") |> get_cv(\"mg\") # returns 100 ## [1] 100 set_cu(1, \"kg\") |> get_cv(\"lb\") # can use any valid unit ## [1] 2.204623 set_cu(0, \"degC\") |> get_cv(\"degF\") # or use it for unit conversion ## [1] 32 set_cu(760, \"Torr\") |> get_cv(\"atm\") # or use it for unit conversion ## [1] 1 try(set_cu(1, \"kg\") |> get_cv(\"M\")) # impossible conversions fail ## Error in `units<-`(`*tmp*`, value = units) :  ##   cannot convert kg into M set_cu(5000, \"g\") |> get_units() ## [1] \"kg\" x <- list(   a = set_cu(5000, \"g\"),   b = 42,   c = set_cu(100, \"mbar\") )  x |> get_units() ##      a      b      c  ##   \"kg\"     NA \"mbar\""},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"arithmetic","dir":"Articles","previous_headings":"","what":"Arithmetic","title":"Explore","text":"Several common arithmetic operations implemented easy inter-conversion quantities. arithmetic operations also automatically keep track units metric prefixes correct calculations.","code":""},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"addition-and-subtraction","dir":"Articles","previous_headings":"Arithmetic","what":"Addition and Subtraction","title":"Explore","text":"Quantities type (e.g. masses, volumes, etc.) can added subtracted proper interpration metric prefixes. resulting quantity scaled best metric prefix described . Attempts add subtract non-matching quantities (e.g. mass + volume) quantity number without units fail error avoid unexpect behaviour ambiguous calculations.","code":"set_cu(0.003, \"g\") - set_cu(2, \"mg\") + set_cu(5, \"µg\") # 1.005 mg ## 1.005 [mg] try(set_cu(1, \"g\") + set_cu(1, \"L\")) # not allowed ## Error in `units<-`(`*tmp*`, value = units(e1)) :  ##   cannot convert L into g try(set_cu(1, \"g\") + 1) # not allowed ## Error in Ops.units(set_cu(1, \"g\"), 1) :  ##   both operands of the expression should be \"units\" objects"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"multiplication-division","dir":"Articles","previous_headings":"Arithmetic","what":"Multiplication / Division","title":"Explore","text":"Quantities can multipled/divided number. resulting quantity scaled best metric prefix. commonly used multiplication/division 1000. Quantities can also divided another quantity type (e.g. mass another mass) effectively canceling units resulting unitless ratio (symbolized [1]) metric prefixes properly taken consideration. Thanks underlying units package UDUNITS-2 API, almost unit calculations possible. cases result can converted one preferred units, conversion proper prefix scaling also happens automatically. examples ","code":"set_cu(1, \"mg\") * 1000 # convert mg into g ## 1 [g] set_cu(1, \"mg\") / 1e6 # convert mg into ng ## 1 [ng] # how many mg in a kg? set_cu(1, \"kg\") / set_cu(1, \"mg\") ## 1e+06 [1]"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"concentration-molarity-amount-volume","dir":"Articles","previous_headings":"Arithmetic > Multiplication / Division","what":"Concentration (Molarity) = Amount / Volume","title":"Explore","text":"","code":"# calculate molarity --> uh oh, no automatic converstion to M set_cu(5, \"nmol\") / set_cu(50, \"mL\") ## 0.1 [nmol/mL] # set preferred units chemunits_options(preferred_units = c(\"mol\", \"g\", \"g/mol\", \"M/bar\", \"M\", \"L\", \"1\")) set_cu(5, \"nmol\") / set_cu(50, \"mL\") # calculation molarity ## 100 [nM] set_cu(5, \"nmol\") / set_cu(100, \"nM\") # calculate volume ## 50 [mL] set_cu(100, \"nM\") * set_cu(50, \"mL\") # calculate amount ## 5e-09 [mol]"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"concentration-density-mass-volume","dir":"Articles","previous_headings":"Arithmetic > Multiplication / Division","what":"Concentration (Density) = Mass / Volume","title":"Explore","text":"","code":"set_cu(5, \"ng\") / set_cu(50, \"mL\") # calculate density ## 100 [pg/mL] set_cu(5, \"ng\") / set_cu(100, \"ng/L\") # calculate volume ## 50 [mL] set_cu(100, \"ng/L\") * set_cu(50, \"mL\") # calculate mass ## 5 [ng]"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"amount-mass-molecular-mass","dir":"Articles","previous_headings":"Arithmetic > Multiplication / Division","what":"Amount = Mass / Molecular Mass","title":"Explore","text":"","code":"set_cu(10, \"g\") / set_cu(50, \"g/mol\") # calculate amount ## 0.2 [mol] set_cu(10, \"g\") / set_cu(200, \"mmol\") # calculate molecular weight ## 50 [g/mol] set_cu(200, \"mmol\") * set_cu(50, \"g/mol\") # calculate mass ## 10 [g]"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"solubility-molarity-pressure","dir":"Articles","previous_headings":"Arithmetic > Multiplication / Division","what":"Solubility = Molarity / Pressure","title":"Explore","text":"","code":"set_cu(10, \"mM\") / set_cu(200, \"mbar\") # calculate solubility ## 50 [mM/bar] set_cu(10, \"mM\") / set_cu(50, \"mM/bar\") # calculate pressure ## 0.2 [bar] set_cu(50, \"mM/bar\") * set_cu(200, \"mbar\") # calculate molarity ## 10 [mM]"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"comparisons","dir":"Articles","previous_headings":"Arithmetic","what":"Comparisons","title":"Explore","text":"Quantities can compared common logic operators (>, >=, <, <=, ==, !=) taking metric scaling properly consideration. Attempts compare non-matching quantities (e.g. mass & volume) fail error avoid unexpect behaviour. Comparisons quantities numerics allowed important cautious since metric scaling quantities affects numeric value. important note due machine errors, == best avoided favor reliable comparisons tests check whether difference quantities smaller tiny quantity:","code":"set_cu(5, \"mg\") < set_cu(1, \"g\") ## [1] TRUE set_cu(5, \"mg\") > set_cu(10, \"ng\") ## [1] TRUE set_cu(5, \"mg\") == set_cu(0.005, \"g\") ## [1] TRUE set_cu(5, \"mg\") != set_cu(5, \"g\") ## [1] TRUE try(set_cu(1, \"mg\") > set_cu(1, \"L\")) # not allowed (different quantities) ## Error in Ops.units(set_cu(1, \"mg\"), set_cu(1, \"L\")) :  ##   cannot compare non-convertible units x <- set_cu(1, \"mg\")  # whether it's *3 and then /3 or the other way around should be identical # but is not because of machine precision x*3/3 == x/3*3 ## [1] FALSE dplyr::near(x*3/3, x/3*3, tol = set_cu(1, \"fg\")) # the same within 1 femtogram ## [1] TRUE"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"data-frames","dir":"Articles","previous_headings":"","what":"Data Frames","title":"Explore","text":"Units (thus chemunits well) fully supported dplyr type data frames (tibbles) units displayed underneath column headers, e.g. [mL]: also means arithmetic operations allowed within data frames. get columns’ units use get_units() make units specific columns explicit, use make_units_explicit() just straight-remove units tibble, use drop_units():","code":"library(dplyr) df <- tibble(   weight = set_cu(1:5, \"mg\"),   volume = set_cu(20, \"mL\") ) df ## # A tibble: 5 × 2 ##   weight volume ##     [mg]   [mL] ## 1      1     20 ## 2      2     20 ## 3      3     20 ## 4      4     20 ## 5      5     20 # or for formatted output in notebooks df |> knitr::kable() # or with explicit units in the header df |> make_units_explicit() |> knitr::kable() df <- tibble(   id = 1:5,   weight = set_cu(1:5, \"mg\"),   vol = set_cu(20, \"mL\"),   mw = set_cu(500, \"g/mol\"),   amount = weight / mw,   conc = amount / vol ) df ## # A tibble: 5 × 6 ##      id weight  vol      mw   amount conc ##   <int>   [mg] [mL] [g/mol]    [mol] [µM] ## 1     1      1   20     500 0.000002  100 ## 2     2      2   20     500 0.000004  200 ## 3     3      3   20     500 0.000006  300 ## 4     4      4   20     500 0.000008  400 ## 5     5      5   20     500 0.00001   500 df |> get_units() ##      id  weight     vol      mw  amount    conc  ##      NA    \"mg\"    \"mL\" \"g/mol\"   \"mol\"    \"µM\" # make all units columns explicit df |> make_units_explicit() ## # A tibble: 5 × 6 ##      id `weight [mg]` `vol [mL]` `mw [g/mol]` `amount [mol]` `conc [µM]` ##   <int>         <dbl>      <dbl>        <dbl>          <dbl>       <dbl> ## 1     1             1         20          500       0.000002         100 ## 2     2             2         20          500       0.000004         200 ## 3     3             3         20          500       0.000006         300 ## 4     4             4         20          500       0.000008         400 ## 5     5             5         20          500       0.00001          500 # change the prefix and suffix df |> make_units_explicit(prefix = \".\", suffix = \"\") ## # A tibble: 5 × 6 ##      id weight.mg vol.mL `mw.g/mol` amount.mol conc.µM ##   <int>     <dbl>  <dbl>      <dbl>      <dbl>   <dbl> ## 1     1         1     20        500   0.000002     100 ## 2     2         2     20        500   0.000004     200 ## 3     3         3     20        500   0.000006     300 ## 4     4         4     20        500   0.000008     400 ## 5     5         5     20        500   0.00001      500 # make a specific subset of columns explicit (using tidy select syntax) df |> make_units_explicit(weight:mw) # from weight to mw ## # A tibble: 5 × 6 ##      id `weight [mg]` `vol [mL]` `mw [g/mol]`   amount conc ##   <int>         <dbl>      <dbl>        <dbl>    [mol] [µM] ## 1     1             1         20          500 0.000002  100 ## 2     2             2         20          500 0.000004  200 ## 3     3             3         20          500 0.000006  300 ## 4     4             4         20          500 0.000008  400 ## 5     5             5         20          500 0.00001   500 df |> make_units_explicit(-mw) # all but mw ## # A tibble: 5 × 6 ##      id `weight [mg]` `vol [mL]`      mw `amount [mol]` `conc [µM]` ##   <int>         <dbl>      <dbl> [g/mol]          <dbl>       <dbl> ## 1     1             1         20     500       0.000002         100 ## 2     2             2         20     500       0.000004         200 ## 3     3             3         20     500       0.000006         300 ## 4     4             4         20     500       0.000008         400 ## 5     5             5         20     500       0.00001          500 df |> drop_units() ## # A tibble: 5 × 6 ##      id weight   vol    mw   amount  conc ##   <int>  <dbl> <dbl> <dbl>    <dbl> <dbl> ## 1     1      1    20   500 0.000002   100 ## 2     2      2    20   500 0.000004   200 ## 3     3      3    20   500 0.000006   300 ## 4     4      4    20   500 0.000008   400 ## 5     5      5    20   500 0.00001    500"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"Explore","text":"Quantities automatically plotted proper axis labels used ggplot. default, units included x y axes titles quantity plotted. Discrete quantities used aesthetics can converted factor using [forcats::fct_in_order()] automatically includes units keeps levels order appearance (using [factor()] rearranges alphabetically).  Alternatively, units can specified axes using [units::scale_x_units()] [units::scale_y_units()] functions units parameter format() function. Units must valid quantities plotted.","code":"# example data set library(tidyr) df <-    crossing(     conc = set_cu(c(0.5, 25), \"mM\"),     volume = set_cu(c(0.2, 90, 400), \"mL\")   ) |>    mutate(     amount = conc * volume,     amount_text = format(amount)   ) df ## # A tibble: 6 × 4 ##   conc volume    amount amount_text    ##   [mM]   [mL]     [mol] <chr>          ## 1  0.5    0.2 0.0000001 1.00e-07 [mol] ## 2  0.5   90   0.000045  4.50e-05 [mol] ## 3  0.5  400   0.0002    2.00e-04 [mol] ## 4 25      0.2 0.000005  5.00e-06 [mol] ## 5 25     90   0.00225   2.25e-03 [mol] ## 6 25    400   0.01      1.00e-02 [mol] library(forcats) library(ggplot2) df |>    mutate(conc = fct_inorder(format(conc))) |>    ggplot() +   aes(x = volume, y = amount, color = conc) +   geom_line() +   facet_wrap(~conc, scales = \"free\") ## Warning: The `scale_name` argument of `continuous_scale()` is deprecated as of ggplot2 ## 3.5.0. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. df |>    mutate(conc = factor(format(conc, units = \"mM\"))) |>    ggplot() +   aes(x = volume, y = amount, color = conc) +   geom_line() +   facet_wrap(~conc, scales = \"free\") +   scale_x_units(unit = \"L\") +   scale_y_units(unit = \"mmol\")"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"fixme-1","dir":"Articles","previous_headings":"","what":"FIXME","title":"Explore","text":"–> work yet, implement scale_x_chemunits seems :( Lastly, scale_x_set_cu() scale_y_set_cu() support axis transformations supported scale_x_continuous() scale_y_continuous(). example log10 transform can used like :","code":"# df |> #   mutate(conc = fct_inorder(format(conc))) |>  #   ggplot() + #   aes(x = volume, y = amount, color = conc) + #   geom_line() + #   facet_wrap(~conc, scales = \"free\") + #   scale_x_units(transform = \"log10\", auto_scale = TRUE) + #   scale_y_units(transform = \"log10\", auto_scale = TRUE)"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"concatenation","dir":"Articles","previous_headings":"","what":"Concatenation","title":"Explore","text":"Numbers units can concatenated using regular c() function long compatible. Concatenation make sure metric prefix taken consideration scales new vector best metric median.","code":"c(   set_cu(1, \"g\"),    set_cu(1:3, \"mg\"),   set_cu(2, \"g\") ) ## ChemUnits: [mg] ## [1] 1000    1    2    3 2000"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"missing-data","dir":"Articles","previous_headings":"","what":"Missing data","title":"Explore","text":"Missing data (NA), empty vector (numeric(0)) infinity placeholders (Inf, -Inf) fully supported work R vectors.","code":"set_cu(c(10, NA, -Inf, Inf, numeric(0)), \"mg\") ## ChemUnits: [mg] ## [1]   10   NA -Inf  Inf"},{"path":"https://chemunits.kopflab.org/articles/explore.html","id":"defining-new-units","dir":"Articles","previous_headings":"","what":"Defining new units","title":"Explore","text":"can add units thanks [units::install_unit()] include preferred_units /auto_scale_units make full use chemunits functionality. example, let’s define SI-accepted unit Dalton alternative molecular weight (sometimes also called molar mass molecular mass) 1 Da = 1 g/mol:","code":"# define new unit install_unit(\"Da\", \"g/mol\")  # test conversion set_cu(10, \"g/mol\") |> set_cu(\"Da\") ## 10 [Da] # include in preferred and auto-scale units chemunits_options(preferred_units = c(\"mol\", \"g\", \"Da\", \"M/bar\", \"M\", \"L\", \"1\")) chemunits_options(auto_scale_units = c(\"mol\", \"g\", \"Da\", \"M/bar\", \"M\", \"L\")) set_cu(10000, \"g\") / set_cu(1, \"mol\") ## 10 [kDa]"},{"path":"https://chemunits.kopflab.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Kopf. Author, maintainer, copyright holder.","code":""},{"path":"https://chemunits.kopflab.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kopf S (2025). chemunits: Package (One Line, Title Case). R package version 0.0.0.9000, http://www.kopflab.org/chemunits/, https://github.com/kopflab/chemunits.","code":"@Manual{,   title = {chemunits: What the Package Does (One Line, Title Case)},   author = {Sebastian Kopf},   year = {2025},   note = {R package version 0.0.0.9000, http://www.kopflab.org/chemunits/},   url = {https://github.com/kopflab/chemunits}, }"},{"path":[]},{"path":"https://chemunits.kopflab.org/index.html","id":"about","dir":"","previous_headings":"","what":"About","title":"What the Package Does (One Line, Title Case)","text":"chemunits package extends functionality units package (makes incredibly powerful udunits-2 API available R) implementing two additional features: automatic conversion units generated arithmetic (multiplication, division, etc.) preferred units automatic scaling numeric values units ideal SI prefixes (nano-, milli-, kilo-, etc.) helpful kinds situations involving units physical quantities particularly powerful routine calculations chemical/biochemical/geochemical applications (hence name “chemunits”). addition features, chemtools also defines molarity (M = mol/L) part default udunits-2 database given widespread use chemical labs calculations. Check examples explore use chemunits vignette.","code":""},{"path":"https://chemunits.kopflab.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version chemunits GitHub :","code":"# install.packages(\"pak\") pak::pak(\"KopfLab/chemunits\")"},{"path":"https://chemunits.kopflab.org/index.html","id":"show-me-some-code","dir":"","previous_headings":"","what":"Show me some code","title":"What the Package Does (One Line, Title Case)","text":"","code":"library(chemunits) #> Loading required package: units #> udunits database from /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library/units/share/udunits/udunits2.xml # let chemunits know which units you prefer for different types of quantities # (you can always reuse the same list, just set it once at the beginning) my_units <- c(   \"m\", \"g\", \"mol\", \"g/mol\", # length, mass, amount, molecular weight   \"L\", \"M\", \"bar\", \"M/bar\", # volume, molarity, pressure, solubility   \"J\", \"J/mol\" # energy, gibbs free energy ) chemunits_options(preferred_units = my_units, auto_scale_units = my_units)  # create a tibble and run some fun calculations library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union df <-    # define 2 compounds   tibble(     compound = c(\"NaOH\", \"theobromine\"),     mw = set_cu(c(40, 180), \"g/mol\")   ) |>   # set a set of weights for each   cross_join(     tibble(weight = set_cu(c(0.01, 100, 10000), \"mg\"))   ) |>   # calculate the amount and concentration if dissolved   mutate(     amount = weight / mw,     vol = set_cu(200, \"mL\"),     conc = amount / vol,     bla = as.numeric(amount)   )  # see what this looks like in different print formats options(digits = 3) df # default tibble output #> # A tibble: 6 × 7 #>   compound         mw   weight      amount  vol        conc         bla #>   <chr>       [g/mol]     [mg]      [mmol] [mL]        [mM]       <dbl> #> 1 NaOH             40     0.01   0.00025    200    0.00125    0.00025   #> 2 NaOH             40   100      2.5        200   12.5        2.5       #> 3 NaOH             40 10000    250          200 1250        250         #> 4 theobromine     180     0.01   0.0000556  200    0.000278   0.0000556 #> 5 theobromine     180   100      0.556      200    2.78       0.556     #> 6 theobromine     180 10000     55.6        200  278.        55.6 df |> knitr::kable() # nicely formatted wih units with the values df |> make_units_explicit() |> knitr::kable() # units in the header"},{"path":"https://chemunits.kopflab.org/reference/as_chemunits.html","id":null,"dir":"Reference","previous_headings":"","what":"convert to chemunits — as_chemunits","title":"convert to chemunits — as_chemunits","text":"convert chemunits","code":""},{"path":"https://chemunits.kopflab.org/reference/as_chemunits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert to chemunits — as_chemunits","text":"","code":"as_chemunits(   x = double(),   ...,   convert_to_preferred = FALSE,   auto_scale = TRUE )"},{"path":"https://chemunits.kopflab.org/reference/as_chemunits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert to chemunits — as_chemunits","text":"... passed units::as_units()","code":""},{"path":"https://chemunits.kopflab.org/reference/auto_scale_units.html","id":null,"dir":"Reference","previous_headings":"","what":"automatically scale numerators to the best udunits prefix if x has units that are listed in the scalable_units — auto_scale_units","title":"automatically scale numerators to the best udunits prefix if x has units that are listed in the scalable_units — auto_scale_units","text":"automatically scale numerators best udunits prefix x units listed scalable_units","code":""},{"path":"https://chemunits.kopflab.org/reference/auto_scale_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"automatically scale numerators to the best udunits prefix if x has units that are listed in the scalable_units — auto_scale_units","text":"","code":"auto_scale_units(x, scalable_units = get_chemunits_option(\"auto_scale_units\"))"},{"path":"https://chemunits.kopflab.org/reference/auto_scale_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"automatically scale numerators to the best udunits prefix if x has units that are listed in the scalable_units — auto_scale_units","text":"x units object scalable_units vector scalable units","code":""},{"path":"https://chemunits.kopflab.org/reference/chemunits-package.html","id":null,"dir":"Reference","previous_headings":"","what":"chemunits: What the Package Does (One Line, Title Case) — chemunits-package","title":"chemunits: What the Package Does (One Line, Title Case) — chemunits-package","text":"package (one paragraph).","code":""},{"path":"https://chemunits.kopflab.org/reference/chemunits-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"chemunits: What the Package Does (One Line, Title Case) — chemunits-package","text":"chemunits package augments units package use chemistry calculations. Resources: Website chemunits package: https://chemunits.kopflab.org Create chemunit: set_cu() Package options: chemunits_options","code":""},{"path":[]},{"path":"https://chemunits.kopflab.org/reference/chemunits-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"chemunits: What the Package Does (One Line, Title Case) — chemunits-package","text":"Maintainer: Sebastian Kopf sebastian.kopf@colorado.edu (ORCID) [copyright holder]","code":""},{"path":"https://chemunits.kopflab.org/reference/chemunits_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Package options — chemunits_options","title":"Package options — chemunits_options","text":"options best set via chemunits_options() queried via get_chemunits_option(). However, base functions options() getOption() work well require chemunits. prefix (package name dot) option name. Setting option value NULL means default used.","code":""},{"path":"https://chemunits.kopflab.org/reference/chemunits_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package options — chemunits_options","text":"","code":"chemunits_options(...)  get_chemunits_option(x)"},{"path":"https://chemunits.kopflab.org/reference/chemunits_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package options — chemunits_options","text":"... set package options, syntax identical options() x name option retrieve","code":""},{"path":"https://chemunits.kopflab.org/reference/chemunits_options.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Package options — chemunits_options","text":"chemunits_options(): set option values get_chemunits_option(): retrieve current value option","code":""},{"path":"https://chemunits.kopflab.org/reference/chemunits_options.html","id":"options-for-the-chemunits-package","dir":"Reference","previous_headings":"","what":"Options for the chemunits package","title":"Package options — chemunits_options","text":"preferred_units (character vector units): default units new units (.e. resulting calculations) converted . Default: \"1\" (.e. units cancel dimensionless converted unitless). order matter except units can interconverted (e.g. \"L\" \"m^3\") case first one used (warning). auto_scale_units (character vector units): units whose best SI prefix (e.g. nano/n, micro/u, milli/m, kilo/k, etc) determined automatically based median value vector unit. Default: character(0) (.e. units automatically scaled).","code":""},{"path":"https://chemunits.kopflab.org/reference/chemunits_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Package options — chemunits_options","text":"","code":"# Default setting(s): old <- chemunits_options() old # original options #> $preferred_units #> [1] \"mol\"   \"g\"     \"g/mol\" \"M/bar\" \"M\"     \"L\"     \"1\"     #>  #> $auto_scale_units #> [1] \"mol\"   \"g\"     \"g/mol\" \"M/bar\" \"M\"     \"L\"     #>  get_chemunits_option(\"preferred_units\") #> [1] \"mol\"   \"g\"     \"g/mol\" \"M/bar\" \"M\"     \"L\"     \"1\"      # with this, there is no default unit defined for energy or volume # so the units are not simplified set_cu(100, \"W\") * set_cu(1, \"s\") #> 100 [W*s] set_cu(1, \"m\") * set_cu(1, \"mm^2\") #> 1 [mL]  # however the default does simplify dimensionless units set_cu(1, \"W*s\") / set_cu(1, \"J\") #> 1 [1]  # Change for the duration of the session: chemunits_options(preferred_units = c(\"J\", \"L\"))  # now W*s is recognized as energy and cm mm^2 as a volume and both are # automatically converted to the specified default units set_cu(100, \"W\") * set_cu(1, \"s\") #> 100 [J] set_cu(1, \"m\") * set_cu(1, \"mm^2\") #> 1 [mL]  # however since \"1\" was no longer included in the `preferred_units`,  # dimensionless units were no longer simplified (thus it is advisable # to always include \"1\" in the `preferred_units` option) set_cu(1, \"W*s\") / set_cu(1, \"J\") #> 1 [W*s/J]  # Restore original values chemunits_options(old)"},{"path":"https://chemunits.kopflab.org/reference/convert_to_preferred_units.html","id":null,"dir":"Reference","previous_headings":"","what":"automatically convert to default units if any fit (defaults would be an option in units_options) — convert_to_preferred_units","title":"automatically convert to default units if any fit (defaults would be an option in units_options) — convert_to_preferred_units","text":"automatically convert default units fit (defaults option units_options)","code":""},{"path":"https://chemunits.kopflab.org/reference/convert_to_preferred_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"automatically convert to default units if any fit (defaults would be an option in units_options) — convert_to_preferred_units","text":"","code":"convert_to_preferred_units(   x,   defaults = get_chemunits_option(\"preferred_units\") )"},{"path":"https://chemunits.kopflab.org/reference/convert_to_preferred_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"automatically convert to default units if any fit (defaults would be an option in units_options) — convert_to_preferred_units","text":"x units object defaults default units convert ","code":""},{"path":"https://chemunits.kopflab.org/reference/get_chemvalue.html","id":null,"dir":"Reference","previous_headings":"","what":"chemunits vector — get_chemvalue","title":"chemunits vector — get_chemvalue","text":"get_chemvalue() retrieves ... FIXME","code":""},{"path":"https://chemunits.kopflab.org/reference/get_chemvalue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"chemunits vector — get_chemvalue","text":"","code":"get_chemvalue(x, units)  get_cv(x, units)"},{"path":"https://chemunits.kopflab.org/reference/get_chemvalue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"chemunits vector — get_chemvalue","text":"x chemunits vector units units","code":""},{"path":"https://chemunits.kopflab.org/reference/get_chemvalue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"chemunits vector — get_chemvalue","text":"double vector","code":""},{"path":"https://chemunits.kopflab.org/reference/get_chemvalue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"chemunits vector — get_chemvalue","text":"alternative drop_units() (well base function .numeric()) simply returns numeric value drops units. can useful calculations without specifying output units like get_chemvalue() requires, communicate intent clearly can lead accidental mistakes realizing units number dropping units auto-scaling unit without realizing SI prefix unit . primary use drop_units() data frames/tibbles can drop units columns .","code":""},{"path":"https://chemunits.kopflab.org/reference/get_chemvalue.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"chemunits vector — get_chemvalue","text":"get_cv(): short-form get_chemvalue function","code":""},{"path":"https://chemunits.kopflab.org/reference/get_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve units — get_units","title":"Retrieve units — get_units","text":"function retrieves text representation units units/chemunits object. get symbolic units, use units::units() instead.","code":""},{"path":"https://chemunits.kopflab.org/reference/get_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve units — get_units","text":"","code":"get_units(x, prefix = group[1], suffix = group[2], group = c(\"\", \"\"))"},{"path":"https://chemunits.kopflab.org/reference/get_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve units — get_units","text":"x chemunits vector prefix prefix text units. Default: \"\" (prefix). suffix suffix text units. Default: \"\" (suffix). group parameter specific prefix suffix text vector length 2. helpful using .e.g prefix/suffix units::units_options() group : group = units_options(\"group\").","code":""},{"path":"https://chemunits.kopflab.org/reference/get_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve units — get_units","text":"text representation units","code":""},{"path":"https://chemunits.kopflab.org/reference/get_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve units — get_units","text":"","code":"set_cu(1, \"m/s\") |> get_units() #> [1] \"m/s\" set_cu(1, \"m/s\") |> get_units(prefix = \"(\", suffix = \")\") #> [1] \"(m/s)\" set_cu(1, \"m/s\") |> get_units(group = units_options(\"group\")) #> [1] \"[m/s]\""},{"path":"https://chemunits.kopflab.org/reference/make_units_explicit.html","id":null,"dir":"Reference","previous_headings":"","what":"Make units explicit — make_units_explicit","title":"Make units explicit — make_units_explicit","text":"function intended data frames / tibbles makes specified columns explicit target units column name.","code":""},{"path":"https://chemunits.kopflab.org/reference/make_units_explicit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make units explicit — make_units_explicit","text":"","code":"make_units_explicit(   df,   ...,   prefix = paste0(\" \", group[1]),   suffix = group[2],   group = units_options(\"group\") )"},{"path":"https://chemunits.kopflab.org/reference/make_units_explicit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make units explicit — make_units_explicit","text":"df data frame make units explicit ... columns make explicit ([dplyr::select())] syntax). none provided, makes columns explicit. [dplyr::select())]: R:dplyr::select()) prefix prefix text units. Default: \" [\" (based units::units_options()). suffix suffix text units. Default: \"]\" (based units::units_options()). group parameter specify prefix suffix text vector length 2. helpful allows compatiblity units::units_options() group option.","code":""},{"path":"https://chemunits.kopflab.org/reference/make_units_explicit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make units explicit — make_units_explicit","text":"text representation units","code":""},{"path":"https://chemunits.kopflab.org/reference/make_units_explicit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make units explicit — make_units_explicit","text":"","code":"# data frame with quantities df <- tibble(   weight = set_cu(1:5, \"mg\"),   vol = set_cu(20, \"mL\"),   mw = set_cu(500, \"g/mol\"),   amount = weight / mw,   conc = amount / vol )  # make all units columns explicit df |> make_units_explicit() #> # A tibble: 5 × 5 #>   `weight [mg]` `vol [mL]` `mw [g/mol]` `amount [µmol]` `conc [µM]` #>           <dbl>      <dbl>        <dbl>           <dbl>       <dbl> #> 1             1         20          500               2         100 #> 2             2         20          500               4         200 #> 3             3         20          500               6         300 #> 4             4         20          500               8         400 #> 5             5         20          500              10         500  # change the prefix and suffix df |> make_units_explicit(prefix = \".\", suffix = \"\") #> # A tibble: 5 × 5 #>   weight.mg vol.mL `mw.g/mol` amount.µmol conc.µM #>       <dbl>  <dbl>      <dbl>       <dbl>   <dbl> #> 1         1     20        500           2     100 #> 2         2     20        500           4     200 #> 3         3     20        500           6     300 #> 4         4     20        500           8     400 #> 5         5     20        500          10     500  # make a specific subset of columns explicit (using tidy select syntax) df |> make_units_explicit(weight:mw) # from weight to mw #> # A tibble: 5 × 5 #>   `weight [mg]` `vol [mL]` `mw [g/mol]` amount conc #>           <dbl>      <dbl>        <dbl> [µmol] [µM] #> 1             1         20          500      2  100 #> 2             2         20          500      4  200 #> 3             3         20          500      6  300 #> 4             4         20          500      8  400 #> 5             5         20          500     10  500 df |> make_units_explicit(-mw) # all but mw #> # A tibble: 5 × 5 #>   `weight [mg]` `vol [mL]`      mw `amount [µmol]` `conc [µM]` #>           <dbl>      <dbl> [g/mol]           <dbl>       <dbl> #> 1             1         20     500               2         100 #> 2             2         20     500               4         200 #> 3             3         20     500               6         300 #> 4             4         20     500               8         400 #> 5             5         20     500              10         500"},{"path":"https://chemunits.kopflab.org/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. tibble tibble","code":""},{"path":"https://chemunits.kopflab.org/reference/set_chemunits.html","id":null,"dir":"Reference","previous_headings":"","what":"chemunits vector — set_chemunits","title":"chemunits vector — set_chemunits","text":"chemunits vector","code":""},{"path":"https://chemunits.kopflab.org/reference/set_chemunits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"chemunits vector — set_chemunits","text":"","code":"set_chemunits(x, units, convert_to_preferred = FALSE, auto_scale = TRUE)  set_cu(x, units, convert_to_preferred = FALSE, auto_scale = TRUE)"},{"path":"https://chemunits.kopflab.org/reference/set_chemunits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"chemunits vector — set_chemunits","text":"x numeric vector units units convert_to_preferred whether convert default (default) auto_scale whether auto-scale (units scalable)","code":""},{"path":"https://chemunits.kopflab.org/reference/set_chemunits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"chemunits vector — set_chemunits","text":"S3 vector class chemunits.","code":""},{"path":"https://chemunits.kopflab.org/reference/set_chemunits.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"chemunits vector — set_chemunits","text":"set_cu(): short-form set_chemunits function","code":""},{"path":"https://chemunits.kopflab.org/reference/set_chemunits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"chemunits vector — set_chemunits","text":"","code":"set_chemunits(c(0.25, 0.5, 0.75)) #> ChemUnits: [1] #> [1] 0.25 0.50 0.75"}]
